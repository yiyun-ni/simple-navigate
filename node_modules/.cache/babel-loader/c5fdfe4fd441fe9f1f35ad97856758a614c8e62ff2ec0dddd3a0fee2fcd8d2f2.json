{"ast":null,"code":"var _jsxFileName = \"/Users/oscar178/Desktop/ SpatialNavigation/simple-navigate/src/components/LandmarkList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Box, Paper, Typography, List, ListItem, ListItemText, ListItemSecondaryAction, IconButton, Button, TextField, Dialog, DialogTitle, DialogContent, DialogActions, Alert } from '@mui/material';\nimport { Delete as DeleteIcon } from '@mui/icons-material';\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = [\"places\"];\nconst LandmarkList = ({\n  landmarks,\n  onAddLandmark,\n  onDeleteLandmark,\n  onStartNavigation\n}) => {\n  _s();\n  const [open, setOpen] = useState(false);\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [selectedPosition, setSelectedPosition] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [showPredictions, setShowPredictions] = useState(false);\n  const [streetViewAvailable, setStreetViewAvailable] = useState(false);\n  const [streetViewError, setStreetViewError] = useState(null);\n  const addressInputRef = useRef(null);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n    libraries\n  });\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => {\n    setOpen(false);\n    setName('');\n    setAddress('');\n    setSelectedPosition(null);\n    setStreetViewAvailable(false);\n    setStreetViewError(null);\n  };\n  const handleSubmit = () => {\n    if (name && address && selectedPosition) {\n      onAddLandmark({\n        id: Date.now().toString(),\n        name,\n        address,\n        position: selectedPosition,\n        isArrived: false\n      });\n      handleClose();\n    }\n  };\n  const checkStreetViewAvailability = position => {\n    const streetViewService = new google.maps.StreetViewService();\n    streetViewService.getPanorama({\n      location: position,\n      radius: 50\n    }, (data, status) => {\n      if (status === 'OK' && data) {\n        setStreetViewAvailable(true);\n        setStreetViewError(null);\n        const panorama = new google.maps.StreetViewPanorama(document.getElementById('street-view'), {\n          position: position,\n          pov: {\n            heading: 34,\n            pitch: 10\n          },\n          addressControl: false,\n          showRoadLabels: false,\n          zoomControl: false\n        });\n      } else {\n        setStreetViewAvailable(false);\n        setStreetViewError('Street View is not available at this location. Please select a different location.');\n      }\n    });\n  };\n  const handleMapClick = event => {\n    if (event.latLng) {\n      const position = {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      };\n      setSelectedPosition(position);\n      checkStreetViewAvailability(position);\n\n      // Reverse geocode to get the address\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        location: position\n      }, (results, status) => {\n        if (status === 'OK' && results !== null && results !== void 0 && results[0]) {\n          setAddress(results[0].formatted_address);\n        }\n      });\n    }\n  };\n  const handleAddressChange = event => {\n    const value = event.target.value;\n    setAddress(value);\n    setShowPredictions(true);\n    if (value.length > 2) {\n      const service = new google.maps.places.AutocompleteService();\n      service.getPlacePredictions({\n        input: value,\n        types: ['address']\n      }, (predictions, status) => {\n        if (status === 'OK' && predictions) {\n          setPredictions(predictions);\n        }\n      });\n    } else {\n      setPredictions([]);\n    }\n  };\n  const handlePredictionClick = prediction => {\n    const service = new google.maps.places.PlacesService(document.createElement('div'));\n    service.getDetails({\n      placeId: prediction.place_id,\n      fields: ['geometry', 'formatted_address']\n    }, (place, status) => {\n      var _place$geometry;\n      if (status === 'OK' && place !== null && place !== void 0 && (_place$geometry = place.geometry) !== null && _place$geometry !== void 0 && _place$geometry.location) {\n        setAddress(place.formatted_address || '');\n        const position = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        };\n        setSelectedPosition(position);\n        checkStreetViewAvailability(position);\n        setShowPredictions(false);\n        setPredictions([]);\n      }\n    });\n  };\n  const handleDelete = id => {\n    onDeleteLandmark(id);\n  };\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      children: \"Error loading Google Maps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Landmarks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleOpen,\n        children: \"Add Landmark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 2,\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: landmarks.map(landmark => /*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: landmark.name,\n            secondary: landmark.address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"end\",\n              \"aria-label\": \"delete\",\n              onClick: () => handleDelete(landmark.id),\n              children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, landmark.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), isLoaded && landmarks.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 2,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"All Landmarks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          height: 400,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerStyle: {\n            width: '100%',\n            height: '100%'\n          },\n          center: landmarks[0].position,\n          zoom: 12,\n          children: landmarks.map((landmark, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: landmark.position,\n            icon: {\n              url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n              scaledSize: new google.maps.Size(32, 32)\n            }\n          }, landmark.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: onStartNavigation,\n        disabled: landmarks.length === 0,\n        children: \"Start Navigation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      maxWidth: \"md\",\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add New Landmark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 2,\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Name\",\n            value: name,\n            onChange: e => setName(e.target.value),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              position: 'relative'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Address\",\n              value: address,\n              onChange: handleAddressChange,\n              fullWidth: true,\n              inputRef: addressInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), showPredictions && predictions.length > 0 && /*#__PURE__*/_jsxDEV(Paper, {\n              sx: {\n                position: 'absolute',\n                top: '100%',\n                left: 0,\n                right: 0,\n                zIndex: 1000,\n                maxHeight: 200,\n                overflow: 'auto'\n              },\n              children: predictions.map(prediction => /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  p: 1,\n                  cursor: 'pointer',\n                  '&:hover': {\n                    backgroundColor: 'action.hover'\n                  }\n                },\n                onClick: () => handlePredictionClick(prediction),\n                children: prediction.description\n              }, prediction.place_id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), streetViewError && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"warning\",\n            sx: {\n              mb: 2\n            },\n            children: streetViewError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), isLoaded && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              height: 300,\n              width: '100%',\n              display: 'flex',\n              gap: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                flex: 1\n              },\n              children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n                mapContainerStyle: {\n                  width: '100%',\n                  height: '100%'\n                },\n                center: selectedPosition || {\n                  lat: 43.6532,\n                  lng: -79.3832\n                },\n                zoom: 12,\n                onClick: handleMapClick,\n                children: selectedPosition && /*#__PURE__*/_jsxDEV(Marker, {\n                  position: selectedPosition\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                flex: 1\n              },\n              children: streetViewAvailable ? /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"street-view\",\n                style: {\n                  width: '100%',\n                  height: '100%'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  width: '100%',\n                  height: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  bgcolor: 'grey.100',\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  gutterBottom: true,\n                  children: \"Street View Preview\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  align: \"center\",\n                  children: \"Select a location on the map to preview Street View\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmit,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !name || !address || !selectedPosition || !streetViewAvailable,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(LandmarkList, \"mFPQXa+La6hAPM7TNa2y46ti60s=\", false, function () {\n  return [useLoadScript];\n});\n_c = LandmarkList;\nexport default LandmarkList;\nvar _c;\n$RefreshReg$(_c, \"LandmarkList\");","map":{"version":3,"names":["React","useState","useRef","Box","Paper","Typography","List","ListItem","ListItemText","ListItemSecondaryAction","IconButton","Button","TextField","Dialog","DialogTitle","DialogContent","DialogActions","Alert","Delete","DeleteIcon","GoogleMap","useLoadScript","Marker","jsxDEV","_jsxDEV","libraries","LandmarkList","landmarks","onAddLandmark","onDeleteLandmark","onStartNavigation","_s","open","setOpen","name","setName","address","setAddress","selectedPosition","setSelectedPosition","predictions","setPredictions","showPredictions","setShowPredictions","streetViewAvailable","setStreetViewAvailable","streetViewError","setStreetViewError","addressInputRef","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","handleOpen","handleClose","handleSubmit","id","Date","now","toString","position","isArrived","checkStreetViewAvailability","streetViewService","google","maps","StreetViewService","getPanorama","location","radius","data","status","panorama","StreetViewPanorama","document","getElementById","pov","heading","pitch","addressControl","showRoadLabels","zoomControl","handleMapClick","event","latLng","lat","lng","geocoder","Geocoder","geocode","results","formatted_address","handleAddressChange","value","target","length","service","places","AutocompleteService","getPlacePredictions","input","types","handlePredictionClick","prediction","PlacesService","createElement","getDetails","placeId","place_id","fields","place","_place$geometry","geometry","handleDelete","color","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","display","justifyContent","alignItems","mb","variant","onClick","p","map","landmark","primary","secondary","edge","gutterBottom","height","width","mapContainerStyle","center","zoom","index","icon","url","scaledSize","Size","disabled","onClose","maxWidth","fullWidth","flexDirection","gap","mt","label","onChange","e","inputRef","top","left","right","zIndex","maxHeight","overflow","cursor","backgroundColor","description","severity","flex","style","bgcolor","align","_c","$RefreshReg$"],"sources":["/Users/oscar178/Desktop/ SpatialNavigation/simple-navigate/src/components/LandmarkList.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Button,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n} from '@mui/material';\nimport { Delete as DeleteIcon } from '@mui/icons-material';\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport { Landmark } from '../types';\n\nconst libraries: (\"places\" | \"drawing\" | \"geometry\" | \"visualization\")[] = [\"places\"];\n\ninterface LandmarkListProps {\n  landmarks: Landmark[];\n  onAddLandmark: (landmark: Landmark) => void;\n  onDeleteLandmark: (id: string) => void;\n  onStartNavigation: () => void;\n}\n\nconst LandmarkList: React.FC<LandmarkListProps> = ({\n  landmarks,\n  onAddLandmark,\n  onDeleteLandmark,\n  onStartNavigation,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [selectedPosition, setSelectedPosition] = useState<{ lat: number; lng: number } | null>(null);\n  const [predictions, setPredictions] = useState<google.maps.places.AutocompletePrediction[]>([]);\n  const [showPredictions, setShowPredictions] = useState(false);\n  const [streetViewAvailable, setStreetViewAvailable] = useState(false);\n  const [streetViewError, setStreetViewError] = useState<string | null>(null);\n  const addressInputRef = useRef<HTMLInputElement>(null);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',\n    libraries,\n  });\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => {\n    setOpen(false);\n    setName('');\n    setAddress('');\n    setSelectedPosition(null);\n    setStreetViewAvailable(false);\n    setStreetViewError(null);\n  };\n\n  const handleSubmit = () => {\n    if (name && address && selectedPosition) {\n      onAddLandmark({\n        id: Date.now().toString(),\n        name,\n        address,\n        position: selectedPosition,\n        isArrived: false,\n      });\n      handleClose();\n    }\n  };\n\n  const checkStreetViewAvailability = (position: { lat: number; lng: number }) => {\n    const streetViewService = new google.maps.StreetViewService();\n    streetViewService.getPanorama(\n      { location: position, radius: 50 },\n      (data, status) => {\n        if (status === 'OK' && data) {\n          setStreetViewAvailable(true);\n          setStreetViewError(null);\n          const panorama = new google.maps.StreetViewPanorama(\n            document.getElementById('street-view') as HTMLElement,\n            {\n              position: position,\n              pov: {\n                heading: 34,\n                pitch: 10,\n              },\n              addressControl: false,\n              showRoadLabels: false,\n              zoomControl: false,\n            }\n          );\n        } else {\n          setStreetViewAvailable(false);\n          setStreetViewError('Street View is not available at this location. Please select a different location.');\n        }\n      }\n    );\n  };\n\n  const handleMapClick = (event: google.maps.MapMouseEvent) => {\n    if (event.latLng) {\n      const position = {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n      };\n      setSelectedPosition(position);\n      checkStreetViewAvailability(position);\n      \n      // Reverse geocode to get the address\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ location: position }, (results, status) => {\n        if (status === 'OK' && results?.[0]) {\n          setAddress(results[0].formatted_address);\n        }\n      });\n    }\n  };\n\n  const handleAddressChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setAddress(value);\n    setShowPredictions(true);\n\n    if (value.length > 2) {\n      const service = new google.maps.places.AutocompleteService();\n      service.getPlacePredictions(\n        {\n          input: value,\n          types: ['address'],\n        },\n        (predictions, status) => {\n          if (status === 'OK' && predictions) {\n            setPredictions(predictions);\n          }\n        }\n      );\n    } else {\n      setPredictions([]);\n    }\n  };\n\n  const handlePredictionClick = (prediction: google.maps.places.AutocompletePrediction) => {\n    const service = new google.maps.places.PlacesService(document.createElement('div'));\n    service.getDetails(\n      {\n        placeId: prediction.place_id,\n        fields: ['geometry', 'formatted_address'],\n      },\n      (place, status) => {\n        if (status === 'OK' && place?.geometry?.location) {\n          setAddress(place.formatted_address || '');\n          const position = {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n          };\n          setSelectedPosition(position);\n          checkStreetViewAvailability(position);\n          setShowPredictions(false);\n          setPredictions([]);\n        }\n      }\n    );\n  };\n\n  const handleDelete = (id: string) => {\n    onDeleteLandmark(id);\n  };\n\n  if (loadError) {\n    return <Typography color=\"error\">Error loading Google Maps</Typography>;\n  }\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\">Landmarks</Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}>\n          Add Landmark\n        </Button>\n      </Box>\n\n      <Paper sx={{ p: 2, mb: 3 }}>\n        <List>\n          {landmarks.map((landmark) => (\n            <ListItem key={landmark.id}>\n              <ListItemText\n                primary={landmark.name}\n                secondary={landmark.address}\n              />\n              <ListItemSecondaryAction>\n                <IconButton \n                  edge=\"end\" \n                  aria-label=\"delete\"\n                  onClick={() => handleDelete(landmark.id)}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </Paper>\n\n      {isLoaded && landmarks.length > 0 && (\n        <Paper sx={{ p: 2, mb: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            All Landmarks\n          </Typography>\n          <Box sx={{ height: 400, width: '100%' }}>\n            <GoogleMap\n              mapContainerStyle={{ width: '100%', height: '100%' }}\n              center={landmarks[0].position}\n              zoom={12}\n            >\n              {landmarks.map((landmark, index) => (\n                <Marker\n                  key={landmark.id}\n                  position={landmark.position}\n                  icon={{\n                    url: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png',\n                    scaledSize: new google.maps.Size(32, 32),\n                  }}\n                />\n              ))}\n            </GoogleMap>\n          </Box>\n        </Paper>\n      )}\n\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onStartNavigation}\n          disabled={landmarks.length === 0}\n        >\n          Start Navigation\n        </Button>\n      </Box>\n\n      <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Add New Landmark</DialogTitle>\n        <DialogContent>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\n            <TextField\n              label=\"Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              fullWidth\n            />\n            <Box sx={{ position: 'relative' }}>\n              <TextField\n                label=\"Address\"\n                value={address}\n                onChange={handleAddressChange}\n                fullWidth\n                inputRef={addressInputRef}\n              />\n              {showPredictions && predictions.length > 0 && (\n                <Paper\n                  sx={{\n                    position: 'absolute',\n                    top: '100%',\n                    left: 0,\n                    right: 0,\n                    zIndex: 1000,\n                    maxHeight: 200,\n                    overflow: 'auto',\n                  }}\n                >\n                  {predictions.map((prediction) => (\n                    <Box\n                      key={prediction.place_id}\n                      sx={{\n                        p: 1,\n                        cursor: 'pointer',\n                        '&:hover': {\n                          backgroundColor: 'action.hover',\n                        },\n                      }}\n                      onClick={() => handlePredictionClick(prediction)}\n                    >\n                      {prediction.description}\n                    </Box>\n                  ))}\n                </Paper>\n              )}\n            </Box>\n            {streetViewError && (\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                {streetViewError}\n              </Alert>\n            )}\n            {isLoaded && (\n              <Box sx={{ height: 300, width: '100%', display: 'flex', gap: 2 }}>\n                <Box sx={{ flex: 1 }}>\n                  <GoogleMap\n                    mapContainerStyle={{ width: '100%', height: '100%' }}\n                    center={selectedPosition || { lat: 43.6532, lng: -79.3832 }}\n                    zoom={12}\n                    onClick={handleMapClick}\n                  >\n                    {selectedPosition && (\n                      <Marker position={selectedPosition} />\n                    )}\n                  </GoogleMap>\n                </Box>\n                <Box sx={{ flex: 1 }}>\n                  {streetViewAvailable ? (\n                    <div\n                      id=\"street-view\"\n                      style={{ width: '100%', height: '100%' }}\n                    />\n                  ) : (\n                    <Box\n                      sx={{\n                        width: '100%',\n                        height: '100%',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        bgcolor: 'grey.100',\n                        p: 2,\n                      }}\n                    >\n                      <Typography variant=\"h6\" gutterBottom>\n                        Street View Preview\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                        Select a location on the map to preview Street View\n                      </Typography>\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button \n            onClick={handleSubmit} \n            variant=\"contained\" \n            color=\"primary\"\n            disabled={!name || !address || !selectedPosition || !streetViewAvailable}\n          >\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default LandmarkList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}